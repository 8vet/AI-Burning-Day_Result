# -*- coding: utf-8 -*-
"""Mask_generator의 사본

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ez2z38pgfOOUvSPKoCgbmsXbbzV3flqr
"""

from __future__ import absolute_import, division, print_function, unicode_literals

!pip install --upgrade tensorflow

!pip install Pillow-SIMD

import tensorflow as tf
from tensorflow import keras
import numpy as np
import matplotlib.pyplot as plt
from PIL import Image
import pickle
import os
import tqdm

def build_model1():
  model = tf.keras.Sequential(
      [
       tf.keras.layers.InputLayer(input_shape=(54)),
       tf.keras.layers.Dense(64, activation = 'relu'),
       tf.keras.layers.Reshape(target_shape=(8, 8,1)),
       tf.keras.layers.Conv2DTranspose(
              filters=32,
              kernel_size=(3),
              strides=(2, 2),
              padding="SAME",
              activation='relu'),
       tf.keras.layers.Dropout(0.5),
       tf.keras.layers.UpSampling2D(),
       tf.keras.layers.Conv2DTranspose(
              filters=32,
              kernel_size=(3),
              strides=(2, 2),
              padding="SAME",
              activation='relu'),
       tf.keras.layers.Dropout(0.5),
       tf.keras.layers.UpSampling2D(),
       tf.keras.layers.Conv2DTranspose(
              filters=1,
              kernel_size=(3),
              strides=(2, 2),
              padding="SAME",
              activation='sigmoid')
                                    
  ])
  

  return model

def build_model2():
  model = tf.keras.Sequential(
      [
       tf.keras.layers.InputLayer(input_shape=(54)),
       tf.keras.layers.Dense(120, activation = 'relu'),
       tf.keras.layers.Dropout(0.5),
       tf.keras.layers.Dense(64,activation = 'relu'),
       tf.keras.layers.Reshape(target_shape=(8, 8,1)),
       
       tf.keras.layers.Dropout(0.25),
       tf.keras.layers.UpSampling2D(),
       tf.keras.layers.Conv2DTranspose(
              filters=54,
              kernel_size=(3),
              strides=(2, 2),
              padding="SAME",
              activation='relu'),
       tf.keras.layers.Conv2DTranspose(
              filters=54,
              kernel_size=(3),
              strides=(2, 2),
              padding="SAME",
              activation='relu'),
       
       tf.keras.layers.Dropout(0.25),
       tf.keras.layers.UpSampling2D(),
       tf.keras.layers.Conv2DTranspose(
              filters=32,
              kernel_size=(3),
              strides=(2, 2),
              padding="SAME",
              activation='relu'),
       tf.keras.layers.Conv2DTranspose(
              filters=1,
              kernel_size=(3),
              strides=(2, 2),
              padding="SAME",
              activation='sigmoid'),
       tf.keras.layers.AveragePooling2D(pool_size=(2,2))
       
                                    
  ])
  

  return model

def model_run(label, image_input, test_label, resized_test):
  model1 = build_model1()
  model1.compile(optimizer='adam',
                loss=keras.losses.BinaryCrossentropy(from_logits=False),
                metrics=['accuracy'])
  model1.fit(label, image_input, epochs = 100, batch_size=100, validation_data=(test_label ,resized_test))

  model2 = build_model2()
  model2.compile(optimizer='adam',
                loss=keras.losses.BinaryCrossentropy(from_logits=False),
                metrics=['accuracy'])
  model2.fit(label, image_input, epochs = 100, batch_size=100, validation_data=(test_label ,resized_test))

  return model1, model2

def pickle_opener(path):
  with open(path + "/pose_list.p","rb") as fr:
    data = pickle.load(fr)
  
  image_path = path + '/result_mask'
  with os.scandir(image_path) as entries:
    image_list = [entry.name for entry in entries if os.path.isfile(image_path+"/"+entry.name) and entry.name.endswith('.png')]

  print(len(image_list))
  file_name = data[0]
  label = data[1]
  without_name = []

  for j in range(len(file_name)):
     if len(label[j]['predictions']) == 0:
       without_name.append(file_name[j])

  for item in without_name:
    target = file_name.index(item)
    del file_name[target]
    del label[target]
  
  for item in without_name:
    target = item + '_mask.png'
    image_list.remove(target)
  
  
  image_list.sort()



  num_error = 0
  for i in range(len(file_name)):
    check = file_name[i] + '_mask.png'
    if check != image_list[i]:
      # print(file_name[i], image_list[i])
      num_error += 1
  
  return label, image_list

def pose_list_to_vector(pose_list):
  # pose_list to vector information
  pose_vectors = list()
  for pose_value in pose_list:
    pose = pose_value['predictions'][0]
    pose_loci = list()
    for i in range(18):
      if str(i) in pose.keys():
        pose_loci.append(1)
        pose_loci.append(pose[str(i)]['x'])
        pose_loci.append(pose[str(i)]['y'])
      else:
        pose_loci.append(0)
        pose_loci.append(0)
        pose_loci.append(0)
    pose_vectors.append(pose_loci)
  pose_vectors = np.asarray(pose_vectors).astype('float32')
  return pose_vectors

def input_prep(image_list, path):
  length = len(image_list)
  output = np.arange(length*256*256).reshape(length, 256, 256)
  i = 0
  for item in tqdm.tqdm(image_list):
    img = Image.open(path + '/result_mask/' + item)
    resized_img = img.convert('L').resize((256,256), Image.ANTIALIAS)

    img_array = np.array(resized_img)
    output[i]=img_array
    
    if i == 1: print(output[i].sum())
    i += 1
    

  return output

label, image_list = pickle_opener('./drive/My Drive/COKAIN/crawling')
test_label, test_image_list = pickle_opener('./drive/My Drive/COKAIN/5cha')
input = input_prep(image_list, './drive/My Drive/COKAIN/crawling')
test = input_prep(test_image_list, './drive/My Drive/COKAIN/5cha')

with open('./drive/My Drive/COKAIN/crawling/input.pickle', 'wb') as f1:
  pickle.dump(input, f1)

with open('./drive/My Drive/COKAIN/crawling/test.pickle', 'wb') as f2:
  pickle.dump(test, f2)

label = pose_list_to_vector(label)
test_label = pose_list_to_vector(test_label)

with open('./drive/My Drive/COKAIN/crawling/input.pickle', 'rb') as f1:
  input = pickle.load(f1)

with open('./drive/My Drive/COKAIN/crawling/test.pickle', 'rb') as f2:
  test = pickle.load(f2)

resized_test = test.reshape(test.shape[0],256,256,1)
resized_input = input.reshape(input.shape[0],256,256,1)

resized_input = resized_input / 256
resized_test = resized_test / 256

model1, model2 = model_run(label, resized_input, test_label, resized_test)

predictions1 = model1.predict(label)
predictions2 = model2.predict(label)

model1.save('./drive/My Drive/COKAIN/mask_generation_model1.h5')
model2.save('./drive/My Drive/COKAIN/mask_generation_model2.h5')

check = 301
input_array1 = predictions1[check].reshape(256,256) * 256
input_array2 = predictions2[check].reshape(256,256) * 256



fig = plt.figure(figsize=(18,5))
model1_fig = fig.add_subplot(1,4,1)
model1_fig.imshow(input_array1)

model2_fig = fig.add_subplot(1,4,2)
model2_fig.imshow(input_array2)

model3_fig = fig.add_subplot(1,4,3)
model3_fig.imshow((input_array1 + input_array2)/2)


fig3 = fig.add_subplot(1,4,4)
fig3.imshow(resized_input[check,:,:,0])

plt.show()

